{#
/**
 * @file
 * Default theme implementation to display the KDCL Hero Paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * Fields:
 * - kdcl_hero_background: Media field.
 * - kdcl_hero_container_width: A select list with multiple options.
 * - kdcl_hero_content: Long Text field.
 * - kdcl_hero_content_location: A select list with multiple options.
 * - kdcl_hero_content_width: A select list with multiple options.
 * - kdcl_hero_invert: A select list with one option.
 * - kdcl_hero_overlay: A select list with multiple options.
 * - kdcl_hero_parallax: A select list with multiple options.
 * - kdcl_hero_zoom: A select list with multiple options.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('kdcl_hero/kdcl-hero') }}

{# The template default set classes. #}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}

{%
set content_classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}

{# Renders Background field. #}
{# Get the Media type of the background field. #}
{% if content.kdcl_hero_background|render %}
  {% set media_type = content.kdcl_hero_background.0['#media'].bundle() %}
  {% set media_types = [
    'kdcl_hero_background_image' == media_type ? 'paragraph--background__image',
    'kdcl_hero_background_video' == media_type ? 'paragraph--background__video',
    ]
  %}
{% endif %}

{# Adds the Media type as a class. #}
{% if media_type %}
  {% set classes = classes|merge(media_types) %}
{% endif %}

{# Renders Content Location field. #}
{# Sets class from values in database. #}
{% if content.kdcl_hero_content_location|render %}
  {% set location_position = content.kdcl_hero_content_location['#items'].getString() %}
  {% set location_positions = [
    'center' == location_position ? 'paragraph--location__center',
    'left' == location_position ? 'paragraph--location__left',
    'right' == location_position ? 'paragraph--location__right',
  ]
  %}
{% endif %}

{# Merges Content Location field with classes. #}
{% set content_location_field = content.kdcl_hero_content_location|render %}
{% if content_location_field %}
  {% set classes = classes|merge(location_positions) %}
{% endif %}

{# Renders Content Width field. #}
{% if content.kdcl_hero_content_width|render %}
  {% set content_width = ' col-sm-' ~ content.kdcl_hero_content_width['#items'].getString() %}
{% endif %}

{# Renders Invert field. #}
{# Sets class from values in database. #}
{% if content.kdcl_hero_invert|render %}
  {% set invert_level = content.kdcl_hero_invert['#items'].getString() %}
  {% set invert_levels = [
    'invert' == invert_level ? 'paragraph--overlay__invert',
  ]
  %}
{% endif %}

{# Merges Invert field with classes. #}
{% set invert_field = content.kdcl_hero_invert|render %}
{% if invert_field %}
  {% set classes = classes|merge(invert_levels) %}
{% endif %}

{# Renders Overlay field. #}
{# Sets data attibute value from values in database. #}
{% if content.kdcl_hero_overlay|render %}
  {% set overlay_level = content.kdcl_hero_overlay['#items'].getString() %}
  {% set overlay_levels = [
    '1' == overlay_level ? '1',
    '2' == overlay_level ? '2',
    '3' == overlay_level ? '3',
    '4' == overlay_level ? '4',
    '5' == overlay_level ? '5',
    '6' == overlay_level ? '6',
    '7' == overlay_level ? '7',
    '8' == overlay_level ? '8',
    '9' == overlay_level ? '9',
  ]
  %}
{% endif %}

{# Renders Parallax field. #}
{# Sets data attibute value from values in database. #}
{% if content.kdcl_hero_parallax|render %}
  {% set parallax_level = content.kdcl_hero_parallax['#items'].getString() %}
  {% set parallax_levels = [
    '-8' == parallax_level ? '-8',
    '-6' == parallax_level ? '-6',
    '-4' == parallax_level ? '-4',
    '-2' == parallax_level ? '-2',
    '0' == parallax_level ? '0',
    '2' == parallax_level ? '2',
    '4' == parallax_level ? '4',
    '6' == parallax_level ? '6',
  ]
  %}
{% endif %}

{# Add a class if Parallax has value. #}
{% set parallax_field = content.kdcl_hero_parallax|render %}
{% set parallax_class = ['rellax',] %}
{% if parallax_field %}
  {% set classes = classes|merge(parallax_class) %}
{% endif %}

{# Renders Zoom field. #}
{# Sets class from values in database. #}
{% if content.kdcl_hero_zoom|render %}
  {% set zoom_level = content.kdcl_hero_zoom['#items'].getString() %}
  {% set zoom_levels = [
    '1' == zoom_level ? 'paragraph--zoom paragraph--zoom__1',
    '2' == zoom_level ? 'paragraph--zoom paragraph--zoom__2',
    '3' == zoom_level ? 'paragraph--zoom paragraph--zoom__3',
    '4' == zoom_level ? 'paragraph--zoom paragraph--zoom__4',
    '5' == zoom_level ? 'paragraph--zoom paragraph--zoom__5',
    '6' == zoom_level ? 'paragraph--zoom paragraph--zoom__6',
    ]
  %}
{% endif %}

{# Merges Zoom field with classes. #}
{% set zoom_field = content.kdcl_hero_zoom|render %}
{% if zoom_field %}
  {% set classes = classes|merge(zoom_levels) %}
{% endif %}

<div{{ attributes.addClass(classes).setAttribute('data-overlay', overlay_levels).setAttribute('data-rellax-speed', parallax_levels) }}>
  {% if content.kdcl_hero_background|render %}
    <div class="paragraph--type--kdcl-hero__background">
      {{ content.kdcl_hero_background }}
    </div>
  {% endif %}
  <div class="paragraph--type--kdcl-hero__content{{ content_width }}">
    {{ content|without('kdcl_hero_background', 'kdcl_hero_content_location', 'kdcl_hero_content_width', 'kdcl_hero_invert', 'kdcl_hero_overlay', 'kdcl_hero_parallax', 'kdcl_hero_zoom') }}
  </div>
</div>
